# 代码出现有规律的重复时，可使用函数
## 调用函数
  Python内置函数可直接调用，可使用help()方法查看函数帮助信息
  函数名即指向一个函数的引用
  - 数据类型转换
    常用函数包括数据类型转换函数，如int()、float()、str()、bool()等
    
    
## 定义函数
  使用def语句定义，返回值用return返回，若没有return，函数执行完毕返回None
  保存的函数可以使用Python解释器from xx import xx导入函数
  - 空函数
    使用pass语句用作占位符，例如：def nop(): pass
    pass也可用于其他语句
    
  - 参数检查
    调用函数时，若参数个数错误，Python会抛出TypeError；
    参数数据类型检查可以使用isinstance()内置函数检查，检查到错误会抛出，例如：
    def my_abs(x):
      if not isinstance(x,(int,float)):
        raise TypeError('bad operand type') #此时传入参数只允许整数和浮点数，否则抛出错误
      if x>=0:
        return x
      else:
        return -x
        
  - 返回多个值
    import math语句表示导入math包，允许后续代码使用math包中函数
    返回多个值实质为返回tuple，括号被省略
    

## 函数的参数
  - 位置参数
    def power(x):
      return x*x
    x为必须传入的位置参数
    def power(x,n):
      s = 1
      while n>0:
        n = n-1
        s = s*x
      return s
    x,n均为位置参数，必须全部传入
  
  - 默认参数
    def power(x,n=2):
      s = 1
      while n>0:
        n = n-1
        s = s*x
      return s
    n为默认参数，不传入时默认为2，默认参数必须在必选参数后，函数有多个参数时，变化大的参数放前面
    使用默认参数可以降低调用函数的难度
    调用多个默认参数，若不按顺序传入，需写上参数名
    默认参数必须指向不变对象
  
  - 可变参数
    可变参数即传入的参数个数是可变的
    def calc(numbers):
      sum = 0
      for num in numbers:
        sum = sum+n*n
      return sum
    使用上面定义参数需要作为list或tuple传入，也可简化为
    def calc(*numbers):
      sum = 0
      for num in numbers:
        sum = sum+n*n
      return sum
    参数前加上*，参数numbers接收到的是一个tuple即可定义可变参数,参数个数任意
    
  - 关键字参数
    关键字参数允许传入0个或任意个含参数名的参数，这些关键字参数自动在函数内部组装为dict
    def person(name,age,**kw)
      print('name:',name,'age:',age,'other:',kw)
    调用此函数可以只传入必选参数，也可传入任意个数的关键字参数
    也可将一个dict转换为关键字参数传入，例如
    extra = {'city':'BeiJing','job':'Engineer'}
    person('Jack',24,**extra)
    
  - 命名关键字参数
    要限制关键字参数的名字，可使用命名关键字参数，例如用city、job作为关键字参数
    def person(name,age,*,city,job):
      print(name,age,city,job)
    *号后面的参数视为命名关键字参数，调用如下
    person('Jack', 24, city='Beijing', job='Engineer')
    如果函数定义中已经有一个可变参数，后面命名关键字参数不再需要*分隔，例如：
    def person(name, age, *args, city, job):
      print(name, age, args, city, job)
    命名关键字参数必须传入参数名
    
  - 参数组合
    参数定义的顺序必须为：必选参数、默认参数、可变参数、命名关键字参数、关键字参数
  
  - 小结
    Python的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。
    默认参数一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误！
    要注意定义可变参数和关键字参数的语法：
    *args是可变参数，args接收的是一个tuple；
    **kw是关键字参数，kw接收的是一个dict。
    以及调用函数时如何传入可变参数和关键字参数的语法：
    可变参数既可以直接传入：func(1, 2, 3)，又可以先组装list或tuple，再通过*args传入：func(*(1, 2, 3))；
    关键字参数既可以直接传入：func(a=1, b=2)，又可以先组装dict，再通过**kw传入：func(**{'a': 1, 'b': 2})。
    使用*args和**kw是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。
    命名的关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。
    定义命名的关键字参数在没有可变参数的情况下不要忘了写分隔符*，否则定义的将是位置参数。
    

## 递归函数
   可在函数内部调用自身的函数称为递归函数，例如：
   def fact(n):
      if n=1:
        return 1
      return n*fact(n-1)
   此函数用来计算n！阶乘。
   递归函数逻辑简单，需注意防止栈溢出，可通过尾递归优化
   尾递归是指函数返回时，调用自身，且return不能包含表达式。例如：
   def fact(n):
      return fact_iter(n,1)
   def fact_iter(num,product):
      if num=1:
        return product
      return fact_iter(num-1,num*product)
   python解释器未针对尾递归优化
      
